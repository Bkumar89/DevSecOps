How To install git?
red hat:
# sudo yum install git
or
# sudo yum install git -y

ubuntu:
# sudo apt-get update
# sudo apt-get install git
or
# sudo apt-get install git -y

Git commands:
RHEL(.rpm)              Ubuntu(.deb)      SUSE(rpm)      
yum                     apt-get
                        apt-get update
yum install git         apt-get install <software>


yum install git
git --version
git --help
git status
git add <filename>
git commit <filename> -m "commit message"
git show <sha1value>
git show ba8536fac
git config --global user.name "username"
git config --global user.email "useremail"
git push origin <branchname> , git push origin master
git log
git log -n1
git log -n2
git log --author="Bkumar89"
git log --since="2020/05/09"
git log --until="2020/05/09"
git blame <filename>/password.java
git blame: line by line code compare - who has done changes ...line by line ...


Next Topics:
1. SHA1 - Secure Hashing Algo 1?
sha1sum abc.txt
edit the abc.txt
sha1sum abc.txt

2. How to make local repository into a remote repository ?
git init
git remote add origin https://github.com/Bkumar89/localrepo.git
then create the repo on githug with the same name and psuh using below
git push --set-upstream origin master

GIT Credentail Store: This will store the credentail into your session.
git config --global credential.helper store

3. git diff - to find the difference between 
git diff 4be9af43:password.java 576837f1:password.java

git log --follow pwd.java

Commit the code from source to git directly
git commit -am <commit message>
git push origin master

4. Reverting the code changes in git. Deletion is not permanent in git.
 a. git checkout <sha1value>
 b. copy the file into some other location
 c. git checkout master
 d. copy the file from (b. location) to your git repo location.
 e. "git status" and "git add ." and <git commit -m "Commit message"> and <git push origin master>

5. Branching
 Create a new branch with base as master: git branch <newbranch> master
 create a new branch and checkout with base as develop (develop branch should exists in your local): git checkour -b <newbranch> develop/<urbasebranch>
 Show all the local Branch: git branch
 Show the remote branchs: git branch -r
 Show all the branchs local and remote: git branch -a
 Create the new branch without specifying base branch: git branch <new-branch>
 Create a branch from commit: git branch <branchname> <hashcommitid>
 Create a branch from a tag: git branch <tagbranchname> <tagname>
 How to push more than one branches at one go: git push origin <branch1> <branch2>
 How to push the code into one branch: git push origin <urbranch/develop>
 How to push all changes from all branches: git push origin --all
 How to delete the Remote branch: git push origin --delete <branchname>
 How to delete the local branch: git branch -d <branchname>
 
6. Branching Strategy
   Follw the feature approach which git follow. each feature, cerate a branch and develop the feature in that brach and then merge the branch into your develop branch and then for release merge the develop into the master. For any defect fixes, create a branch from the base as per need, do the deveploment and merge the code into all the required branches.
   
7. Merging
   Merging is the way to propagate your changes from one branch to another branch. Follow the below steps to merge one branch to another branch.
   Example: Suppose My latest code is in feature/loginchanges branch and I have to merge the feature/loginchanges into develop branch. develop is target and feature/loginchanges
   is source branch.
   Step 1: checkout the target branch where you have to merge- for above ex - git checkout develop
   Step 2: Run the git merge command. Ex: git merge feature/loginchanges
   Step 3: Code will be merged. If there are any code conflict, git will not merge the code and merge conflict error will come.
   Step 4: resolve the merge conflict.
   Step 5: Once merge conflict is resolved then push the merge to remote repos.
   Types of Merge in GIT:
   1. Fast Forward merge - Fast forward merge happens when there is only changes in one branch side and git has to move the HEAD to forward side.
      create a new branch from develop as base: git checkout -b newbranch develop
      Make the code changes in newbranch.
      checkout the develop branch and merge ur changes in that. git checkout develop and git merge newbranch.
   2. Recursive merge/3 way Merge: Recursive merge happens when there are changes in both the branches source and target and we are mergeing. When we merge git uses recursive   merge strategy because it has to check for backward changes also. This is also called 3 way merge.
      create a new branch from develop as base: git checkout -b newbranch develop
      Make the code changes in newbranch. create new file and modify the existing file.
      Some developers have made the code changes in develop branch also. Create the new file and modify the existing file. git checkout develop. make the code changes in develop.
      checkout the develop branch and merge ur changes in that. git checkout develop and git merge newbranch.
      This will show the 3 way merge or recursive merge.
 
 How to resolve merge conflict:
 step 1: create a branch from base as develop: git checkout -b bugfix develop
 step 2: make the code changes in bugfix branch.
 step 3: meanwhile some other developer made the changes in develop branch in the same file which you have made changes in bugfix. (for own practice, please checkout the develop branch and make the changes in the same file where you make the changes in bugfix branch. git checkout develop. change the same file which you have changed in bugfix branch.)
 step 4: checkout the code for develop branch. git checkout develop
 step 5: merge the code into develop. git merge bugfix. Merge conflict will occur. Example of conflict details.
 <<<<<<<
Changes made on the branch that is being merged into. In most cases,
this is the branch that I have currently checked out (i.e. HEAD).
|||||||
The common ancestor version.
=======
Changes made on the branch that is being merged in. This is often a 
feature/topic branch.
>>>>>>>
step 5: open the file where you got the merge conflict 
step 6: change the file with correct code
step 7: Run git status and add the file in stage area and commit the file and push.
step 8: when we commit merge conflicted file, we do not have to give commit message while commiting. git takes it own commit message but if we want we can provide commit message.
 
8. Pull Request
   In the simplest form, pull requests are a mechanism for a developer to notify team members that they have completed a feature. Developer creates PR request
   when one feature is completed and ready to merge.
   
9. GIT Migartion
   Step 1: Clone the git repo which you have to migarte. Craete a directory (mkdir repomigration), git clone <remote repo url>.
   Step 2: Go into the directory and repo.
   Step 3: Check all the branch: git checkout -a
   Step 4: Checkout all branches which you want to migarte: git checkout <branch1>
   Step 5: Fetch all tags. git fetch --tags
   Step 6: remove the old origin: git remote rm origin
   Step 7: Create the new remote repo and add the new origin repo of git: git remote add origin <url to NEW repo>.
   Step 8: Push all your changes to new origin: git push origin --all
   Step 9: git push --tags
IMPORTANT: If you want to copy the entire repos then skip the above steps from 1 to 5: git clone --mirror <old repo> <ur directory>

Other way for Complete Migration:
   Step 1: Clone the old repo with --bare clone: git clone --bare https://github.com/abcd/old-repo.git 
   Step 2: Go to the directory old repo: cd old-repo
   Step 3: Create the remote repo in your github/bitbucket/azuredveops
   Step 4: Mirror the repo to new git remote repo url: git push --mirror <new remote repo url>
   
10. git pull and git fetch
    if there are changes already done in remote repo and those changes you do not have in local repo then to sync with remote repo we do git pull or git fetch.
    git pull - git pull will fetch the new code changes from the remote git remo and then merge the changes immediately in your local repo.
    git fetch - git fetch will fetch the new changes from the remote git repo and does not merge the changes in your local repo. we need to merge the changes manually.
    
11. GIT tags
    Git tag is like branch but it differs with branch in pointing commits. Tag is tag ref point to constant commit. A tag is not changed by the commit. It is particularly used to point a particular commitfor release purpose. There 2 types of tags got provides.
    Annotated tags - It has name, user, time.
    Light weight tags -
    
    git tag <tagname> - create a new tag
    git tag -a release1.0  <without commit message>
    git tag -a release1.0 -m "commit message"
    git push origin <tagname> - push to remote
    git push origin --delete <tagname> - delete the tag from remote/origin.
    
12. Git Interview Questions
    What is git?
    What is git cherrypick?
    which version of git you have used?
    what is git bisect?
    what is merge conflict and how to resolve merge conflict?
    What is fast forward merge and recursive merge?
    What is the difference between git merge and git rebase?
    How to check line by line code commit in git? git blame.
    How to check logs of git? git log
    What is pull request and why it is needed ?
    What is tags in git and why it is used?
    What is branching strategy and its benefits ? Please explain what is the branching strategy your company follows? Hint - need to explain here feature barnches concepts and master/develop.
    Have you done git migration? How to migarte from one git (bitbucket) to another git (azure devops git)? from svn to git migration?

13. How to update git from the binary package from one git version to another git version?
Step 1: Install the required packages. below required pkgs are required to update.
# sudo yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel
# sudo yum install  gcc perl-ExtUtils-MakeMaker

Step 2: Uninstall old git
# sudo yum remove git

Step 3: Download and compile git source binary
# cd /usr/src
# wget <git binary url>
# tar -zxvf <git file>

# cd /usr/src/<git extracted folder>
# make prefix=/usr/local/git all
# make prefix=/usr/local/git install
# echo 'export PATH=$PATH:/usr/local/git/bin' >> /etc/bashrc
# echo 'export PATH=$PATH:/usr/local/git/bin' > /etc/profile.d/git.sh
# source /etc/bashrc

Step 4: Check git version
# git --version

